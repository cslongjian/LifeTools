

// 1 RN屏幕的适配方案 以设计稿宽度750PX为例 
// 密度独立像素 density-independent pixels  DP
// 像素比   ratio_750 = windowWidth / 750;  按照设计稿 750PX宽度。 一个控件的宽80PX  80*像素比 得到实际的对应的宽度dp
// 分辨率 分辨率越高，屏幕里的像素点越多。如同一宽度。1920 和1280 表示在此宽度内包含1920个像素点。1280 就是1280个

// 参考
// https://www.cnblogs.com/best/p/17272814.html

// 2 unity 打包Android的方式
// 基本的安装Android项目SDK JDK NDK 记录安装路径。配置环境变量 还有注意不同版本的gradle 打包会出错。要适配对应版本

// 参考
// https://blog.csdn.net/crb114594/article/details/130809656

// 3 设计模式分类 23种和一些分类概念
//  创建型 5 工厂 抽象工厂 建造者 单例 原型
//  结构型 7 装饰器、代理、桥接、适配器、组合、外观、享元
//  行为型 11 策略、模板方法、命令、迭代器、观察者、仲裁者、备忘录、解析器、建造者、责任链、访问者

// 创建型
// -单例     某个类只能有一个实例，它提供了一个全局访问点，该全局访问点让你能够访问到这个实例。
// -工厂     根据传入的参量，决定创建出哪一种产品类的实例
// -抽象工厂  创建相关或依赖对象的家族，而无需指定具体类
// -建造者   封装一个复杂对象的创建过程，并可以按步骤构造
// -原型     通过现有对象复制的方式创建新对象

// 结构型 7 把类和对象 结合在一起形成更大的结构
// -装饰器、
// -代理、
// -桥接、
// -适配器、
// -组合、
// -外观、
// -享元

// 行为型 11 类和对象如何交互，及划分责任和算法
// -策略、
// -模板方法、
// -命令、
// -迭代器、
// -观察者、
// -仲裁者、
// -备忘录、
// -解析器、
// -建造者、
// -责任链、
// -访问者


// 设计模式的原则
// 单一，接口隔离，依赖反转，里式替代，开闭、迪米特法则、合成复用

// 参考 https://blog.csdn.net/guorui_java/article/details/104026988


// 4 reactnative Animated 动画的解析
// 怎么声明，2如何使用，3 怎么组装复杂构成的动画。
// https://blog.csdn.net/Crazy_SunShine/article/details/82887769
// https://blog.csdn.net/sinat_17775997/article/details/99688983




















